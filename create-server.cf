{
  "Description": "GoCD Server VM",

  "AWSTemplateFormatVersion": "2010-09-09",

  "Parameters" : {
    "Release":          { "Type": "String" },
    "VpcId":            { "Type": "String" },
    "ImageId":          { "Type": "String" },
    "EcsAuth":          { "Type": "String", "NoEcho": true },
    "EcsEmail":         { "Type": "String" },
    "VolumeStack":      { "Type": "String" },
    "GoCDServerImage":  { "Type": "String", "Default": "" },
    "GoCDAgentImage":   { "Type": "String", "Default": "" },
    "GithubPrivateKey": { "Type": "String", "Default": "", "NoEcho": true },
    "CertificateArn":   { "Type": "String", "Default": "" },
    "GoCDAdminOTP":     { "Type": "String", "Default": "", "NoEcho": true }
  },

  "Conditions" : {
    "WithAgentImage" : { "Fn::Not" : [ { "Fn::Equals": [ { "Ref": "GoCDAgentImage" }, "" ] } ] },
    "HasCertificate" : { "Fn::Not" : [ { "Fn::Equals": [ { "Ref": "CertificateArn" }, "" ] } ] }
  },

  "Resources": {

    "LoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : [ "eu-central-1b" ],
        "Instances" : [ { "Ref": "Instance" } ],
        "Listeners" : [
          {
            "InstancePort" : "80",
            "InstanceProtocol" : "HTTP",
            "LoadBalancerPort" : "80",
            "Protocol" : "HTTP"
          },
          { "Fn::If" : [ "HasCertificate", {
            "InstancePort" : "80",
            "InstanceProtocol" : "HTTP",
            "LoadBalancerPort" : "443",
            "Protocol" : "HTTPS",
            "SSLCertificateId" : { "Ref": "CertificateArn" }
          }, { "Ref" : "AWS::NoValue" } ] } 
        ],
        "SecurityGroups": [ { "Ref": "ELBSecurityGroup" } ]
      }
    },

    "WaitOnMountHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitOnMountCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "Instance",
      "Properties" : {
        "Handle" : { "Ref" : "WaitOnMountHandle" },
        "Timeout" : "300"
      }
    },

    "Instance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "Cluster",
      "Properties": {
        "IamInstanceProfile": "ecsInstanceRole",
        "ImageId": { "Ref": "ImageId" },
        "InstanceType": "t2.medium",
        "KeyName": "gocd",
        "Monitoring": "true",
        "SecurityGroupIds": [ { "Ref": "AppSecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/bin/bash -x\n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",

                "export ECS_AUTH=", { "Ref": "EcsAuth" }, "\n",
                "export ECS_EMAIL=", { "Ref": "EcsEmail" }, "\n",
                "export ECS_CLUSTER=", { "Ref": "Cluster" }, "\n",

                "export WAIT_ON_MOUNT=\"", { "Ref": "WaitOnMountHandle" }, "\"\n",

                { "Fn::Join": [ "\n",
                  [
                    "date; cat <<EOF > /etc/ecs/ecs.config",
                    "ECS_LOGLEVEL=info",
                    "ECS_CLUSTER=$ECS_CLUSTER",
                    "ECS_ENGINE_AUTH_TYPE=dockercfg",
                    "ECS_ENGINE_AUTH_DATA={\"https://index.docker.io/v1/\":{\"auth\":\"$ECS_AUTH\",\"email\":\"$ECS_EMAIL\"}}",
                    "EOF",

                    "cat <<EOF > /release/vm",
                    { "Fn::Join": [ "=", [ "VM_RELEASE", { "Ref": "Release" } ] ] },
                    "EOF",

                    "date; cat <<EOF > /root/mountvolumes.sh",
                    "#!/bin/bash",
                    "function mountvolume() {",
                    "  dev=\\$1 mp=\\$2",
                    "  mount | grep \"\\$dev\"",
                    "  if [ \\$? -ne 0 ] ; then",
                    "    file -s \"\\$dev\" | grep filesystem",
                    "    if [ \\$? -ne 0 ] ; then",
                    "      mkfs -t ext4 \"\\$dev\"",
                    "    fi",
                    "    if [ ! -d \"\\$mp\" ] ; then",
                    "      mkdir \"\\$mp\"",
                    "    fi",
                    "    mount \"\\$dev\" \"\\$mp\"",
                    "  fi",
                    "}",
                    "mountvolume /dev/xvdb /xvdb",
                    "mountvolume /dev/xvdc /xvdc",
                    "EOF",
                    "date; /bin/bash /root/mountvolumes.sh",
          
                    "date; stop ecs",
                    "date; service docker restart",
                    "date; start ecs",

                    "date; /usr/local/bin/cfn-signal -e 0 -r \"volumes mounted, ecs restarted.\" \"$WAIT_ON_MOUNT\"", 

                    "date; cat <<EOF > /root/umountvolumes.sh",
                    "#!/bin/bash",
                    "umount /xvdc",
                    "umount /xvdb",
                    "EOF",
                    "chmod 755 /root/umountvolumes.sh",
                    "ln -sf /root/umountvolumes.sh /etc/rc3.d/K05umountvolumes",

                    "date; cat <<EOF > /root/wait_for_gocd_server.sh",
                    "#!/bin/bash",
                    "i=0",
                    "timeout=\\$1",
                    "while true ; do",
                    "  [ \\$i -ge \\$timeout ] && exit 1",
                    "  curl -s -o /dev/null http://localhost && exit 0",
                    "  i=\\$((i + 5))",
                    "  sleep 5",
                    "done",
                    "EOF"
                  ]]
                }
              ]
            ]
          }
        },
        "Volumes" : [
          { "Device" : "/dev/xvdb", "VolumeId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VolumeStack}:volume-id-etc-go" } } },
          { "Device" : "/dev/xvdc", "VolumeId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VolumeStack}:volume-id-var-lib" } } }
        ]
      }
    },

    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "GoCD ELB",
        "VpcId": { "Ref" : "VpcId" },
        "SecurityGroupIngress": [
          { "FromPort": "80",   "ToPort": "80",   "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0" },
          { "FromPort": "443",  "ToPort": "443",  "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0" }
        ],
        "SecurityGroupEgress": [
          { "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },

    "AppSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "GoCD Server",
        "VpcId": { "Ref" : "VpcId" },
        "SecurityGroupIngress": [
          { "FromPort": "80",   "ToPort": "80",   "IpProtocol": "tcp", "SourceSecurityGroupId": { "Ref": "ELBSecurityGroup"} },
          { "FromPort": "443",  "ToPort": "443",  "IpProtocol": "tcp", "SourceSecurityGroupId": { "Ref": "ELBSecurityGroup"} },
          { "FromPort": "2377", "ToPort": "2377", "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0" },
          { "FromPort": "4789", "ToPort": "4789", "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0" },
          { "FromPort": "4789", "ToPort": "4789", "IpProtocol": "udp", "CidrIp": "0.0.0.0/0" },
          { "FromPort": "7946", "ToPort": "7946", "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0" },
          { "FromPort": "7946", "ToPort": "7946", "IpProtocol": "udp", "CidrIp": "0.0.0.0/0" },
          { "FromPort": "8154", "ToPort": "8154", "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0" }
        ],
        "SecurityGroupEgress": [
          { "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },

    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    }
  },

  "Outputs": {

    "GoCDServerURL": {
      "Description": "GoCD Server Url",
      "Value": { "Fn::Join": [ "", [ "https://", { "Fn::GetAtt": [ "LoadBalancer", "DNSName" ] }, "/" ] ] },
      "Export": { "Name": { "Fn::Join": [ ":", [ { "Ref": "AWS::StackName" }, "GoCDServerURL" ] ] } }
    },

    "GoCDAdminOTP": {
      "Description": "GoCD Server Admin OTP",
      "Value": { "Ref": "GoCDAdminOTP" },
      "Export": { "Name": { "Fn::Join": [ ":", [ { "Ref": "AWS::StackName" }, "GoCDAdminOTP" ] ] } }
    },
  }
}
