{
  "Description": "GoCD Server VM",

  "AWSTemplateFormatVersion": "2010-09-09",

  "Parameters" : {
    "VpcId" : {
      "Type" : "String"
    },
    "ImageId" : {
      "Type" : "String"
    },
    "EcsAuth" : {
      "Type" : "String",
      "NoEcho": true
    },
    "EcsEmail" : {
      "Type" : "String"
    },
    "VolumeIdXvdb" : {
      "Type" : "String"
    },
    "VolumeIdXvdc" : {
      "Type" : "String"
    }
  },

  "Resources": {

    "Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": "eu-central-1b",
        "IamInstanceProfile": "ecsInstanceRole",
        "ImageId": { "Ref": "ImageId" },
        "InstanceType": "t2.small",
        "KeyName": "gocd",
        "Monitoring": "true",
        "SecurityGroupIds": [ { "Ref": "SecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/bin/bash\n",

                "export ECS_AUTH=", { "Ref": "EcsAuth" }, "\n",
                "export ECS_EMAIL=", { "Ref": "EcsEmail" }, "\n",
                "export ECS_CLUSTER=", { "Ref": "Cluster" }, "\n",

                { "Fn::Join": [ "\n",
                  [
                    "#!/bin/bash -ex",
                    "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",

                    "cat <<EOF > /etc/ecs/ecs.config",
                    "ECS_LOGLEVEL=info",
                    "ECS_CLUSTER=$ECS_CLUSTER",
                    "ECS_ENGINE_AUTH_TYPE=dockercfg",
                    "ECS_ENGINE_AUTH_DATA={\"https://index.docker.io/v1/\":{\"auth\":\"$ECS_AUTH\",\"email\":\"$ECS_EMAIL\"}}",
                    "EOF",
          
                    "cat <<EOF > /root/mountvolume.sh",
                    "#!/bin/bash",
                    "dev=\\$1 mp=\\$2",
                    "mount | grep \"\\$dev\"",
                    "if [ \\$? -ne 0 ] ; then",
                    "  file -s \"\\$dev\" | grep filesystem",
                    "  if [ \\$? -ne 0 ] ; then",
                    "    mkfs -t ext4 \"\\$dev\"",
                    "  fi",
                    "  if [ ! -d \"\\$mp\" ] ; then",
                    "    mkdir \"\\$mp\"",
                    "  fi",
                    "  mount \"\\$dev\" \"\\$mp\"",
                    "fi",
                    "EOF"
                  ]]
                }
              ]
            ]
          }
        },
        "Volumes" : [
          { "Device" : "/dev/xvdb", "VolumeId" : { "Ref": "VolumeIdXvdb"} },
          { "Device" : "/dev/xvdc", "VolumeId" : { "Ref": "VolumeIdXvdc"} }
        ]

      }
    },

    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Go Server",
        "VpcId": { "Ref" : "VpcId" }
      }
    },

    "IngressSsh": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "IngressHttp": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "80",
        "ToPort": "80",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "IngressHttps": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "443",
        "ToPort": "443",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "Ingress8154": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "8154",
        "ToPort": "8154",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "EgressAll": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    }
  },

  "Outputs": {

    "Cluster": {
      "Description": "GoCD Server ECS Cluster",
      "Value": { "Ref": "Cluster" },
      "Export": { "Name": { "Fn::Join": [ ":", [ { "Ref": "AWS::StackName" }, "Cluster" ] ] } }
    },

    "PublicDnsName": {
      "Description": "GoCD Server PublicDnsName",
      "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "Instance", "PublicDnsName" ] }, "/" ] ] },
      "Export": { "Name": { "Fn::Join": [ ":", [ { "Ref": "AWS::StackName" }, "PublicDnsName" ] ] } }
    }
  }
}
