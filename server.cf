{
  "Description": "GoCD Server VM",

  "AWSTemplateFormatVersion": "2010-09-09",

  "Parameters" : {
    "VpcId": {
      "Type": "String"
    },
    "ImageId" : {
      "Type": "String"
    },
    "EcsAuth" : {
      "Type": "String",
      "NoEcho": true
    },
    "EcsEmail" : {
      "Type" : "String"
    },
    "VolumeStack" : {
      "Type": "String"
    },
    "GoCDServerImage": {
      "Type": "String"
    },
    "GoCDAgentImage": {
      "Type": "String"
    },
    "MapSourceVolumes": {
      "Type": "String"
    },
    "GithubPrivateKey" : {
      "Type": "String",
      "NoEcho": true
    }
  },

  "Conditions" : {
    "MapSourceVolumes" : { "Fn::Equals": [ { "Ref": "MapSourceVolumes" }, "map-source-volumes" ] },
    "WithAgentImage" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "GoCDAgentImage" },  ""] } ] }
  },

  "Resources": {

    "LoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : [ "eu-central-1b" ],
        "Instances" : [ { "Ref": "Instance" } ],
        "Listeners" : [
          {
            "InstancePort" : "80",
            "InstanceProtocol" : "HTTP",
            "LoadBalancerPort" : "80",
            "Protocol" : "HTTP"
          }
        ]
      }
    },

    "Instance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "Cluster",
      "Properties": {
        "IamInstanceProfile": "ecsInstanceRole",
        "ImageId": { "Ref": "ImageId" },
        "InstanceType": "t2.medium",
        "KeyName": "gocd",
        "Monitoring": "true",
        "SecurityGroupIds": [ { "Ref": "SecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/bin/bash -x\n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",

                "export ECS_AUTH=", { "Ref": "EcsAuth" }, "\n",
                "export ECS_EMAIL=", { "Ref": "EcsEmail" }, "\n",
                "export ECS_CLUSTER=", { "Ref": "Cluster" }, "\n",

                { "Fn::Join": [ "\n",
                  [
                    "cat <<EOF > /etc/ecs/ecs.config",
                    "ECS_LOGLEVEL=info",
                    "ECS_CLUSTER=$ECS_CLUSTER",
                    "ECS_ENGINE_AUTH_TYPE=dockercfg",
                    "ECS_ENGINE_AUTH_DATA={\"https://index.docker.io/v1/\":{\"auth\":\"$ECS_AUTH\",\"email\":\"$ECS_EMAIL\"}}",
                    "EOF",

                    "cat <<EOF > /root/mountvolumes.sh",
                    "#!/bin/bash",
                    "function mountvolume() {",
                    "  dev=\\$1 mp=\\$2",
                    "  mount | grep \"\\$dev\"",
                    "  if [ \\$? -ne 0 ] ; then",
                    "    file -s \"\\$dev\" | grep filesystem",
                    "    if [ \\$? -ne 0 ] ; then",
                    "      mkfs -t ext4 \"\\$dev\"",
                    "    fi",
                    "    if [ ! -d \"\\$mp\" ] ; then",
                    "      mkdir \"\\$mp\"",
                    "    fi",
                    "    mount \"\\$dev\" \"\\$mp\"",
                    "  fi",
                    "}",
                    "mountvolume /dev/xvdb /xvdb",
                    "mountvolume /dev/xvdc /xvdc",
                    "EOF",
                    "/bin/bash /root/mountvolumes.sh",
          
                    "stop ecs",
                    "service docker restart",
                    "start ecs",

                    "cat <<EOF > /root/umountvolumes.sh",
                    "#!/bin/bash",
                    "umount /xvdc",
                    "umount /xvdb",
                    "EOF",
                    "chmod 755 /root/umountvolumes.sh",
                    "ln -sf /root/umountvolumes.sh /etc/rc3.d/K05umountvolumes"
                  ]]
                }
              ]
            ]
          }
        },
        "Volumes" : [
          { "Device" : "/dev/xvdb", "VolumeId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VolumeStack}:EtcGo" } } },
          { "Device" : "/dev/xvdc", "VolumeId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VolumeStack}:VarLib" } } }
        ]
      }
    },

    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Go Server",
        "VpcId": { "Ref" : "VpcId" }
      }
    },

    "IngressHttp": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "80",
        "ToPort": "80",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "IngressHttps": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "443",
        "ToPort": "443",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "Ingress8154": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "8154",
        "ToPort": "8154",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "EgressAll": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0",
        "GroupId": { "Ref": "SecurityGroup" }
      }
    },

    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "Service": {
      "Type": "AWS::ECS::Service",
      "Properties" : {
        "Cluster": { "Ref": "Cluster" },
        "DesiredCount": 1,
        "TaskDefinition" : { "Ref": "TaskDefinition" }
      }
    },

    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "DependsOn": "Instance",
      "Properties" : {
        "ContainerDefinitions" : [ 
          {
            "Name": "go-server",
            "Image": { "Ref": "GoCDServerImage" },
            "PortMappings":[
              { "ContainerPort": 8153, "HostPort": 80   },
              { "ContainerPort": 8154, "HostPort": 443  },
              { "ContainerPort": 8154, "HostPort": 8154 }
            ],
            "Essential": "true",
            "Memory": 1280,
            "MountPoints": [
              {
                "ContainerPath": { "Fn::If" : [ "MapSourceVolumes", "/etc/go", "/xvdb" ] },
                "SourceVolume":   "etc-go"
              },
              {
                "ContainerPath": { "Fn::If" : [ "MapSourceVolumes", "/var/lib/go-server", "/xvdc" ] },
                "SourceVolume":   "var-lib-go-server"
              }
            ],
            "Environment": [
              { "Name": "ENABLE_GITHUB_PRIVATE_REPO_SUPPORT", "Value": "yes" },
              { "Name": "GITHUB_PRIVATE_KEY", "Value": { "Ref": "GithubPrivateKey" } }
            ]
          },
          {
            "Fn::If" : [ 
              "WithAgentImage",
              {
                "Name": "go-agent",
                "Image": { "Ref": "GoCDAgentImage" },
                "Memory": 512,
                "MountPoints": [
                  {
                    "ContainerPath": "/var/run/docker.sock",
                    "SourceVolume":   "var-run-docker-sock"
                  }
                ],
                "Environment": [
                  { "Name": "AWS_DEFAULT_REGION", "Value": "eu-central-1" },
                  { "Name": "ENABLE_GITHUB_PRIVATE_REPO_SUPPORT", "Value": "yes" },
                  { "Name": "GITHUB_PRIVATE_KEY", "Value": { "Ref": "GithubPrivateKey" } },
                  { "Name": "GO_SERVER", "Value": { "Fn::GetAtt": [ "Instance", "PublicDnsName" ] } }
                ]
              },
              { "Ref" : "AWS::NoValue" }
            ]
          }
        ],
        "Volumes": [
          { "Host": { "SourcePath": "/xvdb" }, "Name": "etc-go" },
          { "Host": { "SourcePath": "/xvdc" }, "Name": "var-lib-go-server" },
          { "Host": { "SourcePath": "/var/run/docker.sock" }, "Name": "var-run-docker-sock" }
        ],
        "Family": "go-server"
      }
    }
  },

  "Outputs": {

    "DNSName": {
      "Description": "GoCD Server DNS Name",
      "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "LoadBalancer", "DNSName" ] }, "/" ] ] },
      "Export": { "Name": { "Fn::Join": [ ":", [ { "Ref": "AWS::StackName" }, "DNSName" ] ] } }
    }
  }
}
